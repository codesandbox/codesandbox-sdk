// This file is auto-generated by @hey-api/openapi-ts

import type { Client, Options as Options2, TDataShape } from './client';
import { client } from './client.gen';
import type { ConnectToExecWebSocketData, ConnectToExecWebSocketErrors, ConnectToExecWebSocketResponses, CreateDirectoryData, CreateDirectoryErrors, CreateDirectoryResponses, CreateExecData, CreateExecErrors, CreateExecResponses, CreateFileData, CreateFileErrors, CreateFileResponses, DeleteDirectoryData, DeleteDirectoryErrors, DeleteDirectoryResponses, DeleteExecData, DeleteExecErrors, DeleteExecResponses, DeleteFileData, DeleteFileErrors, DeleteFileResponses, ExecExecStdinData, ExecExecStdinErrors, ExecExecStdinResponses, ExecuteTaskActionData, ExecuteTaskActionErrors, ExecuteTaskActionResponses, GetExecData, GetExecErrors, GetExecOutputData, GetExecOutputErrors, GetExecOutputResponses, GetExecResponses, GetTaskData, GetTaskErrors, GetTaskResponses, ListDirectoryData, ListDirectoryErrors, ListDirectoryResponses, ListExecsData, ListExecsErrors, ListExecsResponses, ListPortsData, ListPortsErrors, ListPortsResponses, ListPortsSseData, ListPortsSseErrors, ListPortsSseResponses, ListSetupTasksData, ListSetupTasksErrors, ListSetupTasksResponses, ListTasksData, ListTasksErrors, ListTasksResponses, PerformFileActionData, PerformFileActionErrors, PerformFileActionResponses, ReadFileData, ReadFileErrors, ReadFileResponses, UpdateExecData, UpdateExecErrors, UpdateExecResponses } from './types.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = Options2<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Delete a file
 * Deletes a file at the specified path.
 */
export const deleteFile = <ThrowOnError extends boolean = false>(options: Options<DeleteFileData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteFileResponses, DeleteFileErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/files/{path}',
        ...options
    });
};

/**
 * Read file content
 * Reads the content of a file at the specified path.
 */
export const readFile = <ThrowOnError extends boolean = false>(options: Options<ReadFileData, ThrowOnError>) => {
    return (options.client ?? client).get<ReadFileResponses, ReadFileErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/files/{path}',
        ...options
    });
};

/**
 * Perform file actions
 * Performs actions on files (e.g., move operations).
 */
export const performFileAction = <ThrowOnError extends boolean = false>(options: Options<PerformFileActionData, ThrowOnError>) => {
    return (options.client ?? client).patch<PerformFileActionResponses, PerformFileActionErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/files/{path}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Create a file
 * Creates a new file at the specified path with optional content.
 */
export const createFile = <ThrowOnError extends boolean = false>(options: Options<CreateFileData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateFileResponses, CreateFileErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/files/{path}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete a directory
 * Deletes a directory at the specified path.
 */
export const deleteDirectory = <ThrowOnError extends boolean = false>(options: Options<DeleteDirectoryData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteDirectoryResponses, DeleteDirectoryErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/directories/{path}',
        ...options
    });
};

/**
 * List directory contents
 * Lists the contents of a directory at the specified path.
 */
export const listDirectory = <ThrowOnError extends boolean = false>(options: Options<ListDirectoryData, ThrowOnError>) => {
    return (options.client ?? client).get<ListDirectoryResponses, ListDirectoryErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/directories/{path}',
        ...options
    });
};

/**
 * Create a directory
 * Creates a new directory at the specified path.
 */
export const createDirectory = <ThrowOnError extends boolean = false>(options: Options<CreateDirectoryData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateDirectoryResponses, CreateDirectoryErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/directories/{path}',
        ...options
    });
};

/**
 * List all execs
 * Returns a list of all active execs.
 */
export const listExecs = <ThrowOnError extends boolean = false>(options?: Options<ListExecsData, ThrowOnError>) => {
    return (options?.client ?? client).get<ListExecsResponses, ListExecsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/execs',
        ...options
    });
};

/**
 * Create a new exec
 * Creates a new exec with specified command and arguments.
 */
export const createExec = <ThrowOnError extends boolean = false>(options: Options<CreateExecData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateExecResponses, CreateExecErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/execs',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete Exec
 * Deletes a exec and execs its process.
 */
export const deleteExec = <ThrowOnError extends boolean = false>(options: Options<DeleteExecData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteExecResponses, DeleteExecErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/execs/{id}',
        ...options
    });
};

/**
 * Get exec by ID
 * Retrieves a specific exec by its ID.
 */
export const getExec = <ThrowOnError extends boolean = false>(options: Options<GetExecData, ThrowOnError>) => {
    return (options.client ?? client).get<GetExecResponses, GetExecErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/execs/{id}',
        ...options
    });
};

/**
 * Update exec
 * Updates exec status (e.g., start a stopped exec).
 */
export const updateExec = <ThrowOnError extends boolean = false>(options: Options<UpdateExecData, ThrowOnError>) => {
    return (options.client ?? client).put<UpdateExecResponses, UpdateExecErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/execs/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Exec output
 * Retrieves the plain text output from a exec's buffer.
 */
export const getExecOutput = <ThrowOnError extends boolean = false>(options: Options<GetExecOutputData, ThrowOnError>) => {
    return (options.client ?? client).get<GetExecOutputResponses, GetExecOutputErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/execs/{id}/io',
        ...options
    });
};

/**
 * exec exec stdin
 * exec exec command (e.g., npm install).
 */
export const execExecStdin = <ThrowOnError extends boolean = false>(options: Options<ExecExecStdinData, ThrowOnError>) => {
    return (options.client ?? client).post<ExecExecStdinResponses, ExecExecStdinErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/execs/{id}/io',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Connect to exec via WebSocket
 * Establishes a WebSocket connection for real-time exec interaction.
 *
 * Authentication can be provided via:
 * - Authorization header: `Authorization: Bearer <token>`
 * - Query parameter: `?token=<token>`
 *
 * Permissions:
 * - Admin users: Can send input and receive output
 * - Readonly users: Can only receive output
 *
 */
export const connectToExecWebSocket = <ThrowOnError extends boolean = false>(options: Options<ConnectToExecWebSocketData, ThrowOnError>) => {
    return (options.client ?? client).get<ConnectToExecWebSocketResponses, ConnectToExecWebSocketErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            }
        ],
        url: '/ws/v1/execs/{id}',
        ...options
    });
};

/**
 * List all tasks
 * Lists all configured tasks from .codesandbox/tasks.json with their current status.
 */
export const listTasks = <ThrowOnError extends boolean = false>(options?: Options<ListTasksData, ThrowOnError>) => {
    return (options?.client ?? client).get<ListTasksResponses, ListTasksErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/tasks',
        ...options
    });
};

/**
 * Get task by ID
 * Retrieves a specific task by its ID with current status and configuration.
 */
export const getTask = <ThrowOnError extends boolean = false>(options: Options<GetTaskData, ThrowOnError>) => {
    return (options.client ?? client).get<GetTaskResponses, GetTaskErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/tasks/{id}',
        ...options
    });
};

/**
 * Execute task action
 * Executes an action on a specific task (start, stop, or restart).
 */
export const executeTaskAction = <ThrowOnError extends boolean = false>(options: Options<ExecuteTaskActionData, ThrowOnError>) => {
    return (options.client ?? client).patch<ExecuteTaskActionResponses, ExecuteTaskActionErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/tasks/{id}/actions',
        ...options
    });
};

/**
 * List setup tasks
 * Lists all setup tasks with their execution status. Setup tasks are auto-executed during server start.
 */
export const listSetupTasks = <ThrowOnError extends boolean = false>(options?: Options<ListSetupTasksData, ThrowOnError>) => {
    return (options?.client ?? client).get<ListSetupTasksResponses, ListSetupTasksErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/setup-tasks',
        ...options
    });
};

/**
 * List open ports
 * Lists all open TCP ports on the system, excluding ignored ports configured in the server.
 */
export const listPorts = <ThrowOnError extends boolean = false>(options?: Options<ListPortsData, ThrowOnError>) => {
    return (options?.client ?? client).get<ListPortsResponses, ListPortsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/ports',
        ...options
    });
};

/**
 * List open ports using Server-Sent Events (SSE)
 * Lists all open TCP ports on the system AND LISTEN TO THE CHANGES, excluding ignored ports configured in the server.
 */
export const listPortsSse = <ThrowOnError extends boolean = false>(options?: Options<ListPortsSseData, ThrowOnError>) => {
    return (options?.client ?? client).sse.get<ListPortsSseResponses, ListPortsSseErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/ports/stream',
        ...options
    });
};
