// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { GitStatusData, GitStatusResponse, GitStatusError, GitRemotesData, GitRemotesResponse, GitRemotesError, GitTargetDiffData, GitTargetDiffResponse, GitTargetDiffError, GitPullData, GitPullResponse, GitPullError, GitDiscardData, GitDiscardResponse, GitDiscardError, GitCommitData, GitCommitResponse, GitCommitError, GitPushData, GitPushResponse, GitPushError, GitPushToRemoteData, GitPushToRemoteResponse, GitPushToRemoteError, GitRenameBranchData, GitRenameBranchResponse, GitRenameBranchError, GitRemoteContentData, GitRemoteContentResponse, GitRemoteContentError, GitDiffStatusData, GitDiffStatusResponse, GitDiffStatusError, GitResetLocalWithRemoteData, GitResetLocalWithRemoteResponse, GitResetLocalWithRemoteError, GitCheckoutInitialBranchData, GitCheckoutInitialBranchResponse, GitCheckoutInitialBranchError, GitTransposeLinesData, GitTransposeLinesResponse, GitTransposeLinesError } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
};

/**
 * Get git status
 * Retrieve current git status including changed files, branch information, and commits
 */
export const gitStatus = <ThrowOnError extends boolean = false>(options: Options<GitStatusData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<GitStatusResponse, GitStatusError, ThrowOnError>({
        url: '/git/status',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get git remotes
 * Retrieve git remote information
 */
export const gitRemotes = <ThrowOnError extends boolean = false>(options: Options<GitRemotesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<GitRemotesResponse, GitRemotesError, ThrowOnError>({
        url: '/git/remotes',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get git target diff
 * Retrieve diff between current branch and target branch
 */
export const gitTargetDiff = <ThrowOnError extends boolean = false>(options: Options<GitTargetDiffData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<GitTargetDiffResponse, GitTargetDiffError, ThrowOnError>({
        url: '/git/targetDiff',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Pull from remote
 * Pull changes from remote repository
 */
export const gitPull = <ThrowOnError extends boolean = false>(options: Options<GitPullData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<GitPullResponse, GitPullError, ThrowOnError>({
        url: '/git/pull',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Discard changes
 * Discard local changes for specified paths
 */
export const gitDiscard = <ThrowOnError extends boolean = false>(options: Options<GitDiscardData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<GitDiscardResponse, GitDiscardError, ThrowOnError>({
        url: '/git/discard',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Commit changes
 * Commit changes to the repository
 */
export const gitCommit = <ThrowOnError extends boolean = false>(options: Options<GitCommitData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<GitCommitResponse, GitCommitError, ThrowOnError>({
        url: '/git/commit',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Push changes
 * Push local commits to remote repository
 */
export const gitPush = <ThrowOnError extends boolean = false>(options: Options<GitPushData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<GitPushResponse, GitPushError, ThrowOnError>({
        url: '/git/push',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Push to remote
 * Push to a specific remote repository
 */
export const gitPushToRemote = <ThrowOnError extends boolean = false>(options: Options<GitPushToRemoteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<GitPushToRemoteResponse, GitPushToRemoteError, ThrowOnError>({
        url: '/git/pushToRemote',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Rename branch
 * Rename a git branch
 */
export const gitRenameBranch = <ThrowOnError extends boolean = false>(options: Options<GitRenameBranchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<GitRenameBranchResponse, GitRenameBranchError, ThrowOnError>({
        url: '/git/renameBranch',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get remote content
 * Retrieve content from a remote repository
 */
export const gitRemoteContent = <ThrowOnError extends boolean = false>(options: Options<GitRemoteContentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<GitRemoteContentResponse, GitRemoteContentError, ThrowOnError>({
        url: '/git/remoteContent',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get diff status
 * Retrieve diff status between two git references
 */
export const gitDiffStatus = <ThrowOnError extends boolean = false>(options: Options<GitDiffStatusData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<GitDiffStatusResponse, GitDiffStatusError, ThrowOnError>({
        url: '/git/diffStatus',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Reset local with remote
 * Reset local repository to match the remote state
 */
export const gitResetLocalWithRemote = <ThrowOnError extends boolean = false>(options: Options<GitResetLocalWithRemoteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<GitResetLocalWithRemoteResponse, GitResetLocalWithRemoteError, ThrowOnError>({
        url: '/git/resetLocalWithRemote',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Checkout initial branch
 * Checkout the initial branch of the repository
 */
export const gitCheckoutInitialBranch = <ThrowOnError extends boolean = false>(options: Options<GitCheckoutInitialBranchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<GitCheckoutInitialBranchResponse, GitCheckoutInitialBranchError, ThrowOnError>({
        url: '/git/checkoutInitialBranch',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Transpose lines
 * Transpose line numbers from one git reference to another
 */
export const gitTransposeLines = <ThrowOnError extends boolean = false>(options: Options<GitTransposeLinesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<GitTransposeLinesResponse, GitTransposeLinesError, ThrowOnError>({
        url: '/git/transposeLines',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};