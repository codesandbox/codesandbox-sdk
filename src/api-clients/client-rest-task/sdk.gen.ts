// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { TaskListData, TaskListResponse, TaskListError, TaskRunData, TaskRunResponse, TaskRunError, TaskRunCommandData, TaskRunCommandResponse, TaskRunCommandError, TaskStopData, TaskStopResponse, TaskStopError, TaskCreateData, TaskCreateResponse, TaskCreateError, TaskUpdateData, TaskUpdateResponse, TaskUpdateError, TaskSaveToConfigData, TaskSaveToConfigResponse, TaskSaveToConfigError, TaskGenerateConfigData, TaskGenerateConfigResponse, TaskGenerateConfigError, TaskCreateSetupTasksData, TaskCreateSetupTasksResponse, TaskCreateSetupTasksError } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
};

/**
 * List tasks
 * Retrieve a list of all configured tasks
 */
export const taskList = <ThrowOnError extends boolean = false>(options: Options<TaskListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<TaskListResponse, TaskListError, ThrowOnError>({
        url: '/task/list',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Run task
 * Start execution of a task by ID
 */
export const taskRun = <ThrowOnError extends boolean = false>(options: Options<TaskRunData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<TaskRunResponse, TaskRunError, ThrowOnError>({
        url: '/task/run',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Run command
 * Run a shell command directly, optionally saving it as a task
 */
export const taskRunCommand = <ThrowOnError extends boolean = false>(options: Options<TaskRunCommandData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<TaskRunCommandResponse, TaskRunCommandError, ThrowOnError>({
        url: '/task/runCommand',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Stop task
 * Stop execution of a running task
 */
export const taskStop = <ThrowOnError extends boolean = false>(options: Options<TaskStopData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<TaskStopResponse, TaskStopError, ThrowOnError>({
        url: '/task/stop',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Create task
 * Create a new task configuration
 */
export const taskCreate = <ThrowOnError extends boolean = false>(options: Options<TaskCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<TaskCreateResponse, TaskCreateError, ThrowOnError>({
        url: '/task/create',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Update task
 * Update an existing task configuration
 */
export const taskUpdate = <ThrowOnError extends boolean = false>(options: Options<TaskUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<TaskUpdateResponse, TaskUpdateError, ThrowOnError>({
        url: '/task/update',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Save task to config
 * Save a runtime task to the configuration file
 */
export const taskSaveToConfig = <ThrowOnError extends boolean = false>(options: Options<TaskSaveToConfigData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<TaskSaveToConfigResponse, TaskSaveToConfigError, ThrowOnError>({
        url: '/task/saveToConfig',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Generate task config
 * Generate a configuration file from current tasks
 */
export const taskGenerateConfig = <ThrowOnError extends boolean = false>(options: Options<TaskGenerateConfigData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<TaskGenerateConfigResponse, TaskGenerateConfigError, ThrowOnError>({
        url: '/task/generateConfig',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Create setup tasks
 * Create tasks that run during sandbox setup
 */
export const taskCreateSetupTasks = <ThrowOnError extends boolean = false>(options: Options<TaskCreateSetupTasksData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<TaskCreateSetupTasksResponse, TaskCreateSetupTasksError, ThrowOnError>({
        url: '/task/createSetupTasks',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};