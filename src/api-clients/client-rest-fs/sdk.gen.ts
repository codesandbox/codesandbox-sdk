// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { WriteFileData, WriteFileResponse, WriteFileError, FsReadData, FsReadResponse, FsReadError, FsOperationData, FsOperationResponse, FsOperationError, FsSearchData, FsSearchResponse, FsSearchError, FsStreamingSearchData, FsStreamingSearchResponse, FsStreamingSearchError, FsCancelStreamingSearchData, FsCancelStreamingSearchResponse, FsCancelStreamingSearchError, FsPathSearchData, FsPathSearchResponse, FsPathSearchError, FsUploadData, FsUploadResponse, FsUploadError, FsDownloadData, FsDownloadResponse, FsDownloadError, FsReadFileData, FsReadFileResponse, FsReadFileError, FsReadDirData, FsReadDirResponse, FsReadDirError, FsStatData, FsStatResponse, FsStatError, FsCopyData, FsCopyResponse, FsCopyError, FsRenameData, FsRenameResponse, FsRenameError, FsRemoveData, FsRemoveResponse, FsRemoveError, FsMkdirData, FsMkdirResponse, FsMkdirError, FsWatchData, FsWatchResponse, FsWatchError, FsUnwatchData, FsUnwatchResponse, FsUnwatchError } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
};

/**
 * Write to a file
 * Write content to a file at the specified path
 */
export const writeFile = <ThrowOnError extends boolean = false>(options: Options<WriteFileData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<WriteFileResponse, WriteFileError, ThrowOnError>({
        url: '/fs/writeFile',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Read file system
 * Retrieve the latest snapshot of the server's MemoryFS file and children list
 */
export const fsRead = <ThrowOnError extends boolean = false>(options?: Options<FsReadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<FsReadResponse, FsReadError, ThrowOnError>({
        url: '/fs/read',
        ...options
    });
};

/**
 * Perform file system operation
 * Send a tree operation reflecting filesystem operations
 */
export const fsOperation = <ThrowOnError extends boolean = false>(options: Options<FsOperationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<FsOperationResponse, FsOperationError, ThrowOnError>({
        url: '/fs/operation',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Search files
 * Search for content in files
 */
export const fsSearch = <ThrowOnError extends boolean = false>(options: Options<FsSearchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<FsSearchResponse, FsSearchError, ThrowOnError>({
        url: '/fs/search',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Start streaming search
 * Start a streaming search for content in files
 */
export const fsStreamingSearch = <ThrowOnError extends boolean = false>(options: Options<FsStreamingSearchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<FsStreamingSearchResponse, FsStreamingSearchError, ThrowOnError>({
        url: '/fs/streamingSearch',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Cancel streaming search
 * Cancel an ongoing streaming search
 */
export const fsCancelStreamingSearch = <ThrowOnError extends boolean = false>(options: Options<FsCancelStreamingSearchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<FsCancelStreamingSearchResponse, FsCancelStreamingSearchError, ThrowOnError>({
        url: '/fs/cancelStreamingSearch',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Search file paths
 * Search for file paths matching a pattern
 */
export const fsPathSearch = <ThrowOnError extends boolean = false>(options: Options<FsPathSearchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<FsPathSearchResponse, FsPathSearchError, ThrowOnError>({
        url: '/fs/pathSearch',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Upload file
 * Upload a file to the specified parent directory
 */
export const fsUpload = <ThrowOnError extends boolean = false>(options: Options<FsUploadData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<FsUploadResponse, FsUploadError, ThrowOnError>({
        url: '/fs/upload',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Download files
 * Download files at a specified path as a zip
 */
export const fsDownload = <ThrowOnError extends boolean = false>(options: Options<FsDownloadData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<FsDownloadResponse, FsDownloadError, ThrowOnError>({
        url: '/fs/download',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Read file content
 * Read the content of a file at the specified path
 */
export const fsReadFile = <ThrowOnError extends boolean = false>(options: Options<FsReadFileData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<FsReadFileResponse, FsReadFileError, ThrowOnError>({
        url: '/fs/readFile',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Read directory contents
 * List the contents of a directory at the specified path
 */
export const fsReadDir = <ThrowOnError extends boolean = false>(options: Options<FsReadDirData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<FsReadDirResponse, FsReadDirError, ThrowOnError>({
        url: '/fs/readdir',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get file/directory stats
 * Get stats for a file or directory at the specified path
 */
export const fsStat = <ThrowOnError extends boolean = false>(options: Options<FsStatData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<FsStatResponse, FsStatError, ThrowOnError>({
        url: '/fs/stat',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Copy file/directory
 * Copy a file or directory from one location to another
 */
export const fsCopy = <ThrowOnError extends boolean = false>(options: Options<FsCopyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<FsCopyResponse, FsCopyError, ThrowOnError>({
        url: '/fs/copy',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Rename file/directory
 * Rename a file or directory (move from one location to another)
 */
export const fsRename = <ThrowOnError extends boolean = false>(options: Options<FsRenameData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<FsRenameResponse, FsRenameError, ThrowOnError>({
        url: '/fs/rename',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Remove file/directory
 * Delete a file or directory at the specified path
 */
export const fsRemove = <ThrowOnError extends boolean = false>(options: Options<FsRemoveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<FsRemoveResponse, FsRemoveError, ThrowOnError>({
        url: '/fs/remove',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Create directory
 * Create a new directory at the specified path
 */
export const fsMkdir = <ThrowOnError extends boolean = false>(options: Options<FsMkdirData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<FsMkdirResponse, FsMkdirError, ThrowOnError>({
        url: '/fs/mkdir',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Watch file/directory
 * Watch a file or directory for changes
 */
export const fsWatch = <ThrowOnError extends boolean = false>(options: Options<FsWatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<FsWatchResponse, FsWatchError, ThrowOnError>({
        url: '/fs/watch',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Stop watching file/directory
 * Stop watching a file or directory for changes
 */
export const fsUnwatch = <ThrowOnError extends boolean = false>(options: Options<FsUnwatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<FsUnwatchResponse, FsUnwatchError, ThrowOnError>({
        url: '/fs/unwatch',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};