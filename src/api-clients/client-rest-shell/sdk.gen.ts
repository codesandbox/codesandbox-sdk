// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { ShellCreateData, ShellCreateResponse, ShellCreateError, ShellInData, ShellInResponse, ShellInError, ShellListData, ShellListResponse, ShellListError, ShellOpenData, ShellOpenResponse, ShellOpenError, ShellCloseData, ShellCloseResponse, ShellCloseError, ShellRestartData, ShellRestartResponse, ShellRestartError, ShellTerminateData, ShellTerminateResponse, ShellTerminateError, ShellResizeData, ShellResizeResponse, ShellResizeError, ShellRenameData, ShellRenameResponse, ShellRenameError } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
};

/**
 * Create a new shell
 * Creates a new terminal or command shell
 */
export const shellCreate = <ThrowOnError extends boolean = false>(options: Options<ShellCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ShellCreateResponse, ShellCreateError, ThrowOnError>({
        url: '/shell/create',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Send input to shell
 * Sends user input to an active shell
 */
export const shellIn = <ThrowOnError extends boolean = false>(options: Options<ShellInData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ShellInResponse, ShellInError, ThrowOnError>({
        url: '/shell/in',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List all shells
 * Retrieves a list of all available shells
 */
export const shellList = <ThrowOnError extends boolean = false>(options: Options<ShellListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ShellListResponse, ShellListError, ThrowOnError>({
        url: '/shell/list',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Open an existing shell
 * Opens an existing shell and retrieves its buffer
 */
export const shellOpen = <ThrowOnError extends boolean = false>(options: Options<ShellOpenData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ShellOpenResponse, ShellOpenError, ThrowOnError>({
        url: '/shell/open',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Close a shell
 * Closes a shell without terminating the underlying process
 */
export const shellClose = <ThrowOnError extends boolean = false>(options: Options<ShellCloseData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ShellCloseResponse, ShellCloseError, ThrowOnError>({
        url: '/shell/close',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Restart a shell
 * Restarts an existing shell process
 */
export const shellRestart = <ThrowOnError extends boolean = false>(options: Options<ShellRestartData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ShellRestartResponse, ShellRestartError, ThrowOnError>({
        url: '/shell/restart',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Terminate a shell
 * Terminates a shell and its underlying process
 */
export const shellTerminate = <ThrowOnError extends boolean = false>(options: Options<ShellTerminateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ShellTerminateResponse, ShellTerminateError, ThrowOnError>({
        url: '/shell/terminate',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Resize a shell
 * Updates the dimensions of a shell
 */
export const shellResize = <ThrowOnError extends boolean = false>(options: Options<ShellResizeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ShellResizeResponse, ShellResizeError, ThrowOnError>({
        url: '/shell/resize',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Rename a shell
 * Updates the name of a shell
 */
export const shellRename = <ThrowOnError extends boolean = false>(options: Options<ShellRenameData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ShellRenameResponse, ShellRenameError, ThrowOnError>({
        url: '/shell/rename',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};