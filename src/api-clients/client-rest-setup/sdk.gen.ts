// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { SetupGetData, SetupGetResponse, SetupGetError, SetupSkipStepData, SetupSkipStepResponse, SetupSkipStepError, SetupSkipAllData, SetupSkipAllResponse, SetupSkipAllError, SetupDisableData, SetupDisableResponse, SetupDisableError, SetupEnableData, SetupEnableResponse, SetupEnableError, SetupInitData, SetupInitResponse, SetupInitError, SetupSetStepData, SetupSetStepResponse, SetupSetStepError } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
};

/**
 * Get setup progress
 * Retrieve the current setup progress status
 */
export const setupGet = <ThrowOnError extends boolean = false>(options: Options<SetupGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SetupGetResponse, SetupGetError, ThrowOnError>({
        url: '/setup/get',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Skip setup step
 * Skip a specific step in the setup process
 */
export const setupSkipStep = <ThrowOnError extends boolean = false>(options: Options<SetupSkipStepData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SetupSkipStepResponse, SetupSkipStepError, ThrowOnError>({
        url: '/setup/skip',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Skip all setup steps
 * Skip all remaining steps in the setup process
 */
export const setupSkipAll = <ThrowOnError extends boolean = false>(options: Options<SetupSkipAllData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SetupSkipAllResponse, SetupSkipAllError, ThrowOnError>({
        url: '/setup/skipAll',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Disable setup
 * Disable the setup process
 */
export const setupDisable = <ThrowOnError extends boolean = false>(options: Options<SetupDisableData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SetupDisableResponse, SetupDisableError, ThrowOnError>({
        url: '/setup/disable',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Enable setup
 * Enable the setup process
 */
export const setupEnable = <ThrowOnError extends boolean = false>(options: Options<SetupEnableData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SetupEnableResponse, SetupEnableError, ThrowOnError>({
        url: '/setup/enable',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Initialize setup
 * Initialize the setup process
 */
export const setupInit = <ThrowOnError extends boolean = false>(options: Options<SetupInitData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SetupInitResponse, SetupInitError, ThrowOnError>({
        url: '/setup/init',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Set current setup step
 * Set the current step in the setup process (used for restarting)
 */
export const setupSetStep = <ThrowOnError extends boolean = false>(options: Options<SetupSetStepData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SetupSetStepResponse, SetupSetStepError, ThrowOnError>({
        url: '/setup/setStep',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};