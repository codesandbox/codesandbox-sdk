// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { SystemUpdateData, SystemUpdateResponse, SystemUpdateError, SystemHibernateData, SystemHibernateResponse, SystemHibernateError, SystemMetricsData, SystemMetricsResponse, SystemMetricsError } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
};

/**
 * Update system
 * Update the sandbox system
 */
export const systemUpdate = <ThrowOnError extends boolean = false>(options: Options<SystemUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SystemUpdateResponse, SystemUpdateError, ThrowOnError>({
        url: '/system/update',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Hibernate system
 * Put the sandbox system into hibernation mode
 */
export const systemHibernate = <ThrowOnError extends boolean = false>(options: Options<SystemHibernateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SystemHibernateResponse, SystemHibernateError, ThrowOnError>({
        url: '/system/hibernate',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get system metrics
 * Retrieve current system metrics including CPU, memory and storage usage
 */
export const systemMetrics = <ThrowOnError extends boolean = false>(options: Options<SystemMetricsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SystemMetricsResponse, SystemMetricsError, ThrowOnError>({
        url: '/system/metrics',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};