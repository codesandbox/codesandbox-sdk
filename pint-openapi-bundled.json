{
  "openapi": "3.0.3",
  "info": {
    "title": "Pint API",
    "description": "Pint (formerly Sandbox Agent) is a Go CLI tool that exposes REST API endpoints for file operations, shell management, and task execution, designed to enable building code editor applications similar to VSCode.\n\nThe application uses file-based authentication with admin and readonly tokens, supporting CodeSandbox-compatible task management with robust workspace isolation.\n\n## Versioning\nThis API uses path-based versioning. Current versions:\n- **v1**: Current stable version at `/api/v1/`\n- **v2**: Future version (planned) at `/api/v2/`\n\nUnversioned endpoints (health, metrics) are available directly at the root.",
    "version": "1.0.0",
    "contact": {
      "name": "CodeSandbox",
      "url": "https://codesandbox.io"
    },
    "license": {
      "name": "MIT"
    }
  },
  "servers": [
    {
      "url": "http://localhost:57468",
      "description": "Default development server"
    },
    {
      "url": "http://localhost:{port}",
      "description": "Custom port server",
      "variables": {
        "port": {
          "default": "57468",
          "description": "Custom port number"
        }
      }
    }
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "paths": {
    "/api/v1/files/{path}": {
      "post": {
        "summary": "Create a file",
        "tags": [
          "files"
        ],
        "description": "Creates a new file at the specified path with optional content.",
        "operationId": "createFile",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "path",
            "in": "path",
            "required": true,
            "description": "File path",
            "schema": {
              "type": "string"
            },
            "example": "workspace/src/main.go"
          }
        ],
        "requestBody": {
          "description": "File creation request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FileCreateRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "File created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileReadResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Path is required or invalid path",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Failed to create file",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Read file content",
        "tags": [
          "files"
        ],
        "description": "Reads the content of a file at the specified path.",
        "operationId": "readFile",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "path",
            "in": "path",
            "required": true,
            "description": "File path",
            "schema": {
              "type": "string"
            },
            "example": "workspace/src/main.go"
          }
        ],
        "responses": {
          "200": {
            "description": "File content retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileReadResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Path is required or invalid path",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "File not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Perform file actions",
        "tags": [
          "files"
        ],
        "description": "Performs actions on files (e.g., move operations).",
        "operationId": "performFileAction",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "path",
            "in": "path",
            "required": true,
            "description": "Source file path (will be URL decoded)",
            "schema": {
              "type": "string"
            },
            "example": "workspace/src/old-name.go"
          }
        ],
        "requestBody": {
          "required": true,
          "description": "File action request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FileActionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Action performed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileActionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Path is required, invalid action, or missing destination",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Failed to perform action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a file",
        "tags": [
          "files"
        ],
        "description": "Deletes a file at the specified path.",
        "operationId": "deleteFile",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "path",
            "in": "path",
            "required": true,
            "description": "File path",
            "schema": {
              "type": "string"
            },
            "example": "workspace/src/main.go"
          }
        ],
        "responses": {
          "200": {
            "description": "File deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileOperationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Path is required or invalid path",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "File not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Failed to delete file",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/directories/{path}": {
      "post": {
        "summary": "Create a directory",
        "tags": [
          "directories"
        ],
        "description": "Creates a new directory at the specified path.",
        "operationId": "createDirectory",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "path",
            "in": "path",
            "required": true,
            "description": "Directory path",
            "schema": {
              "type": "string"
            },
            "example": "workspace/src/utils"
          }
        ],
        "responses": {
          "201": {
            "description": "Directory created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileOperationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Path is required or invalid path",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Failed to create directory",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "List directory contents",
        "tags": [
          "directories"
        ],
        "description": "Lists the contents of a directory at the specified path.",
        "operationId": "listDirectory",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "path",
            "in": "path",
            "required": true,
            "description": "Directory path (will be URL decoded). Use \"/\" for root directory.",
            "schema": {
              "type": "string"
            },
            "example": "workspace/src"
          }
        ],
        "responses": {
          "200": {
            "description": "Directory contents retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DirectoryListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid path",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Directory not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a directory",
        "tags": [
          "directories"
        ],
        "description": "Deletes a directory at the specified path.",
        "operationId": "deleteDirectory",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "path",
            "in": "path",
            "required": true,
            "description": "Directory path",
            "schema": {
              "type": "string"
            },
            "example": "workspace/src/utils"
          }
        ],
        "responses": {
          "200": {
            "description": "Directory deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileOperationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Path is required or invalid path",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Directory not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Failed to delete directory",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/execs": {
      "post": {
        "summary": "Create a new exec",
        "tags": [
          "execs"
        ],
        "description": "Creates a new exec with specified command and arguments.",
        "operationId": "createExec",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Exec creation request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateExecRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Exec created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExecItem"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid request body",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Failed to create exec",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "List all execs",
        "tags": [
          "execs"
        ],
        "description": "Returns a list of all active execs.",
        "operationId": "listExecs",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Execs retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExecListResponse"
                }
              },
              "text/event-stream": {
                "schema": {
                  "type": "string",
                  "description": "Server-Sent Events stream of exec updates"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/execs/{id}": {
      "get": {
        "summary": "Get exec by ID",
        "tags": [
          "execs"
        ],
        "description": "Retrieves a specific exec by its ID.",
        "operationId": "getExec",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Exec identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Exec retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExecItem"
                }
              },
              "text/event-stream": {
                "schema": {
                  "type": "string",
                  "description": "Server-Sent Events stream of exec updates"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Exec ID is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Exec not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update exec",
        "tags": [
          "execs"
        ],
        "description": "Updates exec status (e.g., start a stopped exec).",
        "operationId": "updateExec",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Exec identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Exec update request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateExecRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Exec updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExecItem"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Exec ID is required or invalid status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Exec not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict - Exec is already in the requested state",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Failed to update exec",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Exec",
        "tags": [
          "execs"
        ],
        "description": "Deletes a exec and execs its process.",
        "operationId": "deleteExec",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Exec identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Exec deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExecDeleteResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Exec ID is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Exec not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/execs/{id}/io": {
      "get": {
        "summary": "Get Exec output",
        "tags": [
          "execs"
        ],
        "description": "Retrieves the plain text output from a exec's buffer.",
        "operationId": "getExecOutput",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Exec identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Exec output retrieved successfully",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ExecStdout",
                  "description": "Plain text exec output"
                }
              },
              "text/event-stream": {
                "schema": {
                  "type": "string",
                  "description": "Server-Sent Events stream of exec updates with same format as ExecStdout"
                },
                "example": "data: {\"type\":\"stdout\",\"output\":\"Exec output line 1\\n\", \"sequence\" : 1, \"timestamp\":\"2024-10-01T12:00:00Z\"}\n"
              }
            }
          },
          "400": {
            "description": "Bad Request - Exec ID is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Exec not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "exec exec stdin",
        "tags": [
          "execs"
        ],
        "description": "exec exec command (e.g., npm install).",
        "operationId": "execExecStdin",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Exec identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Exec update request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExecStdin"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Exec stdin executed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExecItem"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Exec ID is required or invalid status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Exec not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Failed to update exec",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/ws/v1/execs/{id}": {
      "get": {
        "summary": "Connect to exec via WebSocket",
        "tags": [
          "execs"
        ],
        "description": "Establishes a WebSocket connection for real-time exec interaction.\n\nAuthentication can be provided via:\n- Authorization header: `Authorization: Bearer <token>`\n- Query parameter: `?token=<token>`\n\nPermissions:\n- Admin users: Can send input and receive output\n- Readonly users: Can only receive output\n",
        "operationId": "connectToExecWebSocket",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "queryToken": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Exec identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "101": {
            "description": "WebSocket connection established successfully"
          },
          "400": {
            "description": "Bad Request - Exec ID is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication token required or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Exec not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Failed to establish WebSocket connection",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/tasks": {
      "get": {
        "summary": "List all tasks",
        "tags": [
          "tasks"
        ],
        "description": "Lists all configured tasks from .codesandbox/tasks.json with their current status.",
        "operationId": "listTasks",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "List of tasks retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskListResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/tasks/{id}": {
      "get": {
        "summary": "Get task by ID",
        "tags": [
          "tasks"
        ],
        "description": "Retrieves a specific task by its ID with current status and configuration.",
        "operationId": "getTask",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Task identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Task retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTaskResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Task ID is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Task not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/tasks/{id}/actions": {
      "patch": {
        "summary": "Execute task action",
        "tags": [
          "tasks"
        ],
        "description": "Executes an action on a specific task (start, stop, or restart).",
        "operationId": "executeTaskAction",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Task identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "actionType",
            "in": "query",
            "required": true,
            "description": "Type of action to execute",
            "schema": {
              "$ref": "#/components/schemas/TaskActionType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Action executed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskActionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Task ID is required, invalid action type, or invalid command",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Task not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict - Invalid state transition (e.g., task already running for start, task not running for stop)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Failed to execute action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/setup-tasks": {
      "get": {
        "summary": "List setup tasks",
        "tags": [
          "tasks"
        ],
        "description": "Lists all setup tasks with their execution status. Setup tasks are auto-executed during server start.",
        "operationId": "listSetupTasks",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Setup tasks retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SetupTaskListResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ports": {
      "get": {
        "summary": "List open ports",
        "tags": [
          "ports"
        ],
        "description": "Lists all open TCP ports on the system, excluding ignored ports configured in the server.",
        "operationId": "listPorts",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Open ports retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortsListResponse"
                },
                "examples": {
                  "default": {
                    "summary": "Example ports response",
                    "value": {
                      "ports": [
                        {
                          "port": 8080,
                          "address": "0.0.0.0"
                        },
                        {
                          "port": 3000,
                          "address": "127.0.0.1"
                        },
                        {
                          "port": 5432,
                          "address": "::1"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Failed to read port information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/ports/stream": {
      "get": {
        "summary": "List open ports using Server-Sent Events (SSE)",
        "tags": [
          "ports"
        ],
        "description": "Lists all open TCP ports on the system AND LISTEN TO THE CHANGES, excluding ignored ports configured in the server.",
        "operationId": "ListPortsSSE",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Open ports retrieved successfully",
            "content": {
              "text/event-stream": {
                "schema": {
                  "type": "string",
                  "description": "Server-Sent Events stream of ports list updates"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Failed to read port information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "queryToken": {
        "type": "apiKey",
        "in": "query",
        "name": "token"
      }
    },
    "schemas": {
      "Error": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer"
          },
          "message": {
            "type": "string"
          }
        },
        "required": [
          "code",
          "message"
        ]
      },
      "FileReadResponse": {
        "type": "object",
        "properties": {
          "path": {
            "type": "string",
            "description": "File path"
          },
          "content": {
            "type": "string",
            "description": "File content"
          }
        },
        "required": [
          "path",
          "content"
        ]
      },
      "FileCreateRequest": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string",
            "description": "File content to create"
          }
        }
      },
      "FileOperationResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Operation result message"
          },
          "path": {
            "type": "string",
            "description": "File or directory path"
          }
        },
        "required": [
          "message",
          "path"
        ]
      },
      "FileActionRequest": {
        "type": "object",
        "properties": {
          "action": {
            "type": "string",
            "enum": [
              "move"
            ],
            "description": "Type of action to perform on the file"
          },
          "destination": {
            "type": "string",
            "description": "Destination path for move operation"
          }
        },
        "required": [
          "action",
          "destination"
        ]
      },
      "FileActionResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Operation result message"
          },
          "from": {
            "type": "string",
            "description": "Source path"
          },
          "to": {
            "type": "string",
            "description": "Destination path"
          }
        },
        "required": [
          "message",
          "from",
          "to"
        ]
      },
      "FileInfo": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "File or directory name"
          },
          "path": {
            "type": "string",
            "description": "Full path to the file or directory"
          },
          "isDir": {
            "type": "boolean",
            "description": "Whether this entry is a directory"
          },
          "size": {
            "type": "integer",
            "format": "int64",
            "description": "File size in bytes"
          },
          "modTime": {
            "type": "string",
            "description": "Last modification time"
          }
        },
        "required": [
          "name",
          "path",
          "isDir",
          "size",
          "modTime"
        ]
      },
      "DirectoryListResponse": {
        "type": "object",
        "properties": {
          "path": {
            "type": "string",
            "description": "Directory path"
          },
          "files": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FileInfo"
            },
            "description": "List of files and directories"
          }
        },
        "required": [
          "path",
          "files"
        ]
      },
      "ExecItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Exec unique identifier"
          },
          "command": {
            "type": "string",
            "description": "Command being executed"
          },
          "args": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Command line arguments"
          },
          "status": {
            "type": "string",
            "description": "Exec status (e.g., running, stopped, finished)"
          },
          "pid": {
            "type": "integer",
            "description": "Process ID of the exec"
          }
        },
        "required": [
          "id",
          "command",
          "args",
          "status",
          "pid"
        ]
      },
      "ExecListResponse": {
        "type": "object",
        "properties": {
          "execs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExecItem"
            },
            "description": "List of execs"
          }
        },
        "required": [
          "execs"
        ]
      },
      "CreateExecRequest": {
        "type": "object",
        "properties": {
          "command": {
            "type": "string",
            "description": "Command to execute in the exec"
          },
          "args": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Command line arguments"
          },
          "autorun": {
            "type": "boolean",
            "description": "Whether to automatically start the exec (defaults to true)"
          },
          "interactive": {
            "type": "boolean",
            "description": "Whether to start interactive shell session or not (defaults to false)"
          }
        },
        "required": [
          "command",
          "args"
        ]
      },
      "UpdateExecRequest": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "running"
            ],
            "description": "Status to set for the exec (currently only 'running' is supported)"
          }
        },
        "required": [
          "status"
        ]
      },
      "ExecDeleteResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Deletion confirmation message"
          }
        },
        "required": [
          "message"
        ]
      },
      "ExecStdout": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Type of the exec output",
            "enum": [
              "stdout",
              "stderr"
            ]
          },
          "output": {
            "type": "string",
            "description": "Data associated with the exec output"
          },
          "sequence": {
            "type": "integer",
            "format": "int32",
            "description": "Sequence number of the output message"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when the output was generated"
          }
        },
        "required": [
          "type",
          "output",
          "sequence"
        ]
      },
      "ExecStdin": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Type of the exec input",
            "enum": [
              "stdin",
              "resize"
            ]
          },
          "input": {
            "type": "string",
            "description": "Data associated with the exec input"
          }
        },
        "required": [
          "type",
          "input"
        ]
      },
      "TaskStatus": {
        "type": "string",
        "enum": [
          "RUNNING",
          "FINISHED",
          "ERROR",
          "KILLED",
          "RESTARTING",
          "IDLE"
        ]
      },
      "TaskBase": {
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/TaskStatus"
          },
          "execId": {
            "type": "string",
            "description": "Exec identifier associated with the task"
          },
          "startTime": {
            "type": "string",
            "description": "Task start time in RFC3339 format",
            "example": "2017-07-21T17:32:28Z"
          },
          "endTime": {
            "type": "string",
            "description": "Task end time in RFC3339 format",
            "example": "2017-08-21T17:32:28Z"
          }
        },
        "required": [
          "status",
          "execId",
          "startTime",
          "endTime"
        ],
        "description": "Base schema for a task item, containing common fields shared across different task types.",
        "title": "TaskBase"
      },
      "TaskRestart": {
        "type": "object",
        "properties": {
          "files": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "clone": {
            "type": "boolean"
          },
          "resume": {
            "type": "boolean"
          },
          "branch": {
            "type": "boolean"
          }
        },
        "required": [
          "files",
          "clone",
          "resume",
          "branch"
        ]
      },
      "TaskPreview": {
        "type": "object",
        "properties": {
          "port": {
            "type": "integer"
          }
        },
        "required": [
          "port"
        ]
      },
      "TaskConfig": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "command": {
            "type": "string"
          },
          "runAtStart": {
            "type": "boolean"
          },
          "restartOn": {
            "$ref": "#/components/schemas/TaskRestart"
          },
          "preview": {
            "$ref": "#/components/schemas/TaskPreview"
          }
        },
        "required": [
          "name",
          "command",
          "runAtStart",
          "restartOn",
          "preview"
        ]
      },
      "TaskItem": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TaskBase"
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Task identifier"
              },
              "config": {
                "$ref": "#/components/schemas/TaskConfig"
              }
            },
            "required": [
              "id",
              "config"
            ]
          }
        ]
      },
      "TaskListResponse": {
        "type": "object",
        "properties": {
          "tasks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaskItem"
            }
          }
        },
        "required": [
          "tasks"
        ]
      },
      "GetTaskResponse": {
        "type": "object",
        "properties": {
          "task": {
            "$ref": "#/components/schemas/TaskItem"
          }
        },
        "required": [
          "task"
        ]
      },
      "TaskActionType": {
        "type": "string",
        "enum": [
          "start",
          "stop",
          "restart"
        ],
        "description": "Type of action to execute on a task"
      },
      "TaskActionResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TaskBase"
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Task identifier"
              },
              "name": {
                "type": "string",
                "description": "Task name"
              },
              "command": {
                "type": "string",
                "description": "Task command"
              },
              "message": {
                "type": "string",
                "description": "Action result message"
              }
            },
            "required": [
              "id",
              "name",
              "message",
              "command"
            ]
          }
        ],
        "description": "Schema for task action responses, containing details about the task and the action performed.",
        "title": "TaskActionResponse"
      },
      "SetupTaskItem": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TaskBase"
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "Setup task name"
              },
              "command": {
                "type": "string",
                "description": "Setup task command"
              }
            },
            "required": [
              "name",
              "command",
              "execId"
            ]
          }
        ]
      },
      "SetupTaskListResponse": {
        "type": "object",
        "properties": {
          "setupTasks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SetupTaskItem"
            }
          }
        },
        "required": [
          "setupTasks"
        ]
      },
      "PortInfo": {
        "type": "object",
        "properties": {
          "port": {
            "type": "integer",
            "format": "uint16",
            "minimum": 1,
            "maximum": 65535,
            "description": "Port number",
            "example": 8080
          },
          "address": {
            "type": "string",
            "description": "IP address the port is bound to",
            "example": "0.0.0.0"
          }
        },
        "required": [
          "port",
          "address"
        ]
      },
      "PortsListResponse": {
        "type": "object",
        "properties": {
          "ports": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PortInfo"
            },
            "description": "List of open ports"
          }
        },
        "required": [
          "ports"
        ]
      },
      "Task": {
        "$ref": "#/components/schemas/TaskItem"
      }
    }
  }
}